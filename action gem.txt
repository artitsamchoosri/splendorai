def action_gem(self, player, choose,player_type):
        if player==2 and player_type!="bot":
            if self.gem[choose]-1>=0:
                self.gem_P2[choose]+=1
                self.gem[choose]=self.gem[choose]-1
                print("เลือก GEM {}".format(choose))
            else:
                return False
        
        def getmaxgem(idcard,player):
            def getgem_playe(player):
                gem_player=[0,0,0]
                if player==1:
                    gem_player[0]=self.gem_P1[0]+self.gem_bonus_P1[0]
                    gem_player[1]=self.gem_P1[1]+self.gem_bonus_P1[1]
                    gem_player[2]=self.gem_P1[2]+self.gem_bonus_P1[2]
                elif player==2:
                    gem_player[0]=self.gem_P2[0]+self.gem_bonus_P2[0]
                    gem_player[1]=self.gem_P2[1]+self.gem_bonus_P2[1]
                    gem_player[2]=self.gem_P2[2]+self.gem_bonus_P2[2]
                return gem_player
            gemboard=np.array([0,0,0])
            gemweight=np.array([0,0,0])
            gem_player=getgem_playe(player)
            #print(gem_player)
            if idcard==-1:
                pay_gem=np.array([1,1,1])
            else:
                pay_gem=np.array([int(self.card[idcard]["red_buy"]),int(self.card[idcard]["blue_buy"]),int(self.card[idcard]["green_buy"])])
                #print(pay_gem)
                pay_gem[0]=pay_gem[0]-gem_player[0]
                pay_gem[1]=pay_gem[1]-gem_player[1]
                pay_gem[2]=pay_gem[2]-gem_player[2]
                filtered = filter(lambda score: score <= 0, pay_gem)
                if len(list(filtered))==0:
                    pay_gem[pay_gem <= 0] = 1
                else:
                    pay_gem[pay_gem <= 0] = 0.1
                #print(pay_gem)
            for i in range(len(self.open_card)):
                if self.open_card[i] == 1:
                    gemboard[0]+=int(self.card[i]["red_buy"])
                    gemboard[1]+=int(self.card[i]["blue_buy"])
                    gemboard[2]+=int(self.card[i]["green_buy"])
            total = np.sum(gemboard)
            #print(gemboard)
            if idcard != "random" and idcard !=-1:
                gemboard[0]+=(pay_gem[0]*total)
                gemboard[1]+=(pay_gem[1]*total)
                gemboard[2]+=(pay_gem[2]*total)
            #print(gemboard)
            gemweight[0]=gemboard[0]
            gemweight[1]=gemboard[1]
            gemweight[2]=gemboard[2]
            
            #print("WIGHT RED {} BLUE {} GREEN {}".format(gemweight[0],gemweight[1],gemweight[2]))

            if idcard!=-1:
                pickgem=[np.argmax(gemweight)]
                #print(pickgem)
                if self.gem[pickgem[0]]-1>=0:
                    return pickgem
                else:
                    gemweight[np.argmax(gemweight)]=0
                    pickgem=[np.argmax(gemweight)]
                    #print(pickgem)
                    if self.gem[pickgem[0]]-1>=0:
                        return pickgem
                    else :
                        gemweight[np.argmax(gemweight)]=0
                        pickgem=[np.argmax(gemweight)]
                        if self.gem[pickgem[0]]-1>=0:
                            return pickgem
                        else:
                            gemweight[gemweight <= 0] = 1
                            print("RAMDOM GEM")
                            #time.sleep(30)
                            return random.choices(population=[0,1,2],weights=gemweight)
                            
                        
            else:
                return random.choices(population=[0,1,2],weights=gemweight)
        def getmingem(idcard,player):
            def getgem_playe(player):
                gem_player=[0,0,0]
                if player==1:
                    gem_player[0]=self.gem_P1[0]+self.gem_bonus_P1[0]
                    gem_player[1]=self.gem_P1[1]+self.gem_bonus_P1[1]
                    gem_player[2]=self.gem_P1[2]+self.gem_bonus_P1[2]
                elif player==2:
                    gem_player[0]=self.gem_P2[0]+self.gem_bonus_P2[0]
                    gem_player[1]=self.gem_P2[1]+self.gem_bonus_P2[1]
                    gem_player[2]=self.gem_P2[2]+self.gem_bonus_P2[2]
                return gem_player
            def getgem_playe_only(player):
                gem_player=[0,0,0]
                if player==1:
                    gem_player[0]=self.gem_P1[0]
                    gem_player[1]=self.gem_P1[1]
                    gem_player[2]=self.gem_P1[2]
                elif player==2:
                    gem_player[0]=self.gem_P2[0]
                    gem_player[1]=self.gem_P2[1]
                    gem_player[2]=self.gem_P2[2]
                return gem_player
            gemboard=[0,0,0]
            gemweight=[0,0,0]
            gem_player=getgem_playe(player)
            gem_player_only=getgem_playe_only(player)
            #print(gem_player)
            if idcard==-1:
                pay_gem=np.array([1,1,1])
            else:
                pay_gem=np.array([int(self.card[idcard]["red_buy"]),int(self.card[idcard]["blue_buy"]),int(self.card[idcard]["green_buy"])])
                pay_gem[0]=pay_gem[0]-gem_player[0]
                pay_gem[1]=pay_gem[1]-gem_player[1]
                pay_gem[2]=pay_gem[2]-gem_player[2]
                
                filtered = filter(lambda score: score <= 0, pay_gem)
                
                if len(list(filtered))==0:
                    pay_gem[pay_gem <= 0] = 1
                else:
                    pay_gem[pay_gem <= 0] = 0.1
                

            for i in range(len(self.open_card)):
                if self.open_card[i] == 1:
                    gemboard[0]+=int(self.card[i]["red_buy"])
                    gemboard[1]+=int(self.card[i]["blue_buy"])
                    gemboard[2]+=int(self.card[i]["green_buy"])
            total = np.sum(gemboard)

            if idcard != "random" and idcard !=-1:
                gemboard[0]+=(pay_gem[0]*total)
                gemboard[1]+=(pay_gem[1]*total)
                gemboard[2]+=(pay_gem[2]*total)
                total = np.sum(gemboard)
            
            gemweight[0]=(total+gemboard[0])/total
            gemweight[1]=(total+gemboard[1])/total
            gemweight[2]=(total+gemboard[2])/total
            #print("WIGHT RED {} BLUE {} GREEN {}".format(gemweight[0],gemweight[1],gemweight[2]))

            if idcard!=-1: #ผิดตรงนี้
                pickgem=[np.argmax(gemweight)]
                #print("L1")
                #print(pickgem)
                #print(gem_player_only[pickgem[0]])
                if gem_player_only[pickgem[0]]-1>=0:
                    #print("WIGHT RED {} BLUE {} GREEN {}".format(gemweight[0],gemweight[1],gemweight[2]))
                    return pickgem
                else:
                    gemweight[pickgem[0]]=0
                    pickgem=[np.argmax(gemweight)]
                    #print("L2")
                    #print(pickgem)
                    if gem_player_only[pickgem[0]]-1>=0:
                        
                        #print("WIGHT RED {} BLUE {} GREEN {}".format(gemweight[0],gemweight[1],gemweight[2]))
                        return pickgem
                    else:
                        gemweight[pickgem[0]]=0 
                        pickgem=[np.argmax(gemweight)]
                        #print("L3")
                        #print(pickgem)
                        #print("WIGHT RED {} BLUE {} GREEN {}".format(gemweight[0],gemweight[1],gemweight[2]))
                        return pickgem
            else:
                return random.choices(population=[0,1,2],weights=gemweight)
        def action_del(idcard,player):
            if player==1 and np.sum(self.gem_P1)>=5 and player_type=="bot":
                i=0
                while i <= 1:
                    pickgem=getmingem(idcard,player)
                    if self.gem_P1[pickgem[0]]-1>=0: 
                        self.gem_P1[pickgem[0]]=self.gem_P1[pickgem[0]]-1
                        self.gem[pickgem[0]]=self.gem[pickgem[0]]+1
                        i=i+1
                        print("DEL GEM {}".format(pickgem[0]))
                        
            elif player==2 and np.sum(self.gem_P2)>=5 and player_type=="bot":
                i=0
                while i <= 1:
                    pickgem=getmingem(idcard,player)
                    if self.gem_P2[pickgem[0]]-1>=0:
                        self.gem_P2[pickgem[0]]=self.gem_P2[pickgem[0]]-1
                        self.gem[pickgem[0]]=self.gem[pickgem[0]]+1
                        i=i+1
                        print("DEL GEM {}".format(pickgem[0]))
        
        if (np.sum(self.gem)<2) :
            print("Not enough gems")
            action_del(choose,player)
            return False
        #------------------------------------- ทิ้ง gem
        action_del(choose,player)      
        #------------------------------------- เลือก gem
        if player==1 and player_type=="bot":
            i=0
            while i <= 1:
                pickgem=getmaxgem(choose,player)
                if self.gem[pickgem[0]]-1>=0:
                    self.gem_P1[pickgem[0]]+=1
                    self.gem[pickgem[0]]-=1
                    i=i+1
                    print("PICK GEM {}".format(pickgem[0]))
                        
        elif player==2 and player_type=="bot":
            i=0
            while i <= 1:
                pickgem=getmaxgem(choose,player)
                if self.gem[pickgem[0]]-1>=0:
                    self.gem_P2[pickgem[0]]+=1
                    self.gem[pickgem[0]]-=1
                    i=i+1
                    print("PICK GEM {}".format(pickgem[0]))